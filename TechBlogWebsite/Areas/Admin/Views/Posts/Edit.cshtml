@model TechBlogWebsite.Models.Post
@{
    ViewBag.Title = "Edit Post";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayoutPage1.cshtml";
}
<style>
    .container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 20px;
    }

    .card {
        width: 100%;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        font-size: 1.2rem;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #ced4da;
    }

    label.col-form-label {
        font-size: 1.1rem;
    }

    .card-header {
        background-color: #007bff;
        color: white;
    }

    .btn {
        padding: 10px 20px;
        font-size: 1.1rem;
    }

    .custom-dropdown {
        appearance: none;
        -webkit-appearance: none;
        background-color: #fff;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='1' d='M2 5l6 6 6-6'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 10px center;
        padding: 10px 30px 10px 10px;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }
</style>

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h2 class="text-center mb-0">EDIT POST</h2>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Edit", "Posts", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.PostID)

                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", id = "Title" } })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.AuthorID, "Author", htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.DropDownList("AuthorID", null, htmlAttributes: new { @class = "form-control custom-dropdown" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label text-primary" })
                    @Html.TextAreaFor(model => model.Content, new { @class = "form-control", rows = 6, placeholder = "Enter content", id = "txtContent" })
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control custom-dropdown" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter tags" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.PublishedDate, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.PublishedDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.ModifiedDate, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.ModifiedDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FeaturedImage, htmlAttributes: new { @class = "control-label text-primary" })
                    <div class="d-flex align-items-center">
                        <div class="col-md-6">
                            <input type="file" name="img" id="img" accept=".jpg,.png,.gif,.jpeg,.bmp" />
                        </div>
                        <div class="col-md-4">
                            <img src="~/Content/upload/@Model.FeaturedImage" width="100px" />
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.ViewCount, htmlAttributes: new { @class = "control-label text-primary" })
                        @Html.EditorFor(model => model.ViewCount, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Link, htmlAttributes: new { @class = "control-label text-primary" })
                    @Html.EditorFor(model => model.Link, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Meta, htmlAttributes: new { @class = "control-label text-primary" })
                    @Html.EditorFor(model => model.Meta, new { htmlAttributes = new { @class = "form-control", id = "Meta" } })
                </div>
                <div class="form-group form-check">
                    @Html.EditorFor(model => model.Hide)
                    @Html.LabelFor(model => model.Hide, htmlAttributes: new { @class = "form-check-label text-primary" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "control-label text-primary" })
                    @Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DateBegin, htmlAttributes: new { @class = "control-label text-primary" })
                    @Html.EditorFor(model => model.DateBegin, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                </div>
                <div class="text-center mt-3">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
                </div>
            }
        </div>
    </div>
</div>

@section _Footer
{
    <script src="~/Areas/Admin/Content/ckfinder/ckfinder.js"></script>
    <script src="~/Areas/Admin/Content/ckeditor/ckeditor.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
        // Initialize CKEditor for the Content field
        var editor = CKEDITOR.replace("txtContent");
        editor.config.height = '400px';
        editor.config.customConfig = '/Areas/admin/Content/ckeditor/config.js';

        // jQuery function to automatically update the Meta field based on the Title
        $(function () {
            $("#Title").keyup(function () {
                var text = $.trim($(this).val().toLowerCase());
                var text_create = text.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a")
                    .replace(/\ /g, '-')
                    .replace(/đ/g, "d")
                    .replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y")
                    .replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u")
                    .replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o")
                    .replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e")
                    .replace(/ì|í|ị|ỉ|ĩ/g, "i");
                $('#Meta').val(text_create);
            }).keyup(); // Trigger the function on initial page load
        });
    </script>
}
